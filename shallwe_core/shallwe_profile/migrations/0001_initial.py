# Generated by Django 5.0.1 on 2024-02-24 12:28

import django.contrib.postgres.fields
import django.db.models.deletion
import imagekit.models.fields
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('shallwe_locations', '0003_alter_location_city'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='InterestTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('name', models.CharField(help_text='Enter a Cyrillic interest tag name', max_length=32, verbose_name='Interest Name')),
            ],
            options={
                'verbose_name': 'Interest Tag',
                'verbose_name_plural': 'Interest Tags',
            },
        ),
        migrations.CreateModel(
            name='OtherAnimalTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('name', models.CharField(help_text='Enter a Cyrillic animal tag name', max_length=32, verbose_name='Other Animal Name')),
            ],
            options={
                'verbose_name': 'Other Animal Tag',
                'verbose_name_plural': 'Other Animal Tags',
            },
        ),
        migrations.CreateModel(
            name='TaggedInterestItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Tagged Interest Item',
                'verbose_name_plural': 'Tagged Interest Items',
            },
        ),
        migrations.CreateModel(
            name='TaggedOtherAnimalItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Tagged Other Animal Item',
                'verbose_name_plural': 'Tagged Other Animal Items',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_hidden', models.BooleanField(default=False)),
                ('name', models.CharField()),
                ('photo_w768', imagekit.models.fields.ProcessedImageField(upload_to='profile-photos/')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfileAbout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateField(auto_now_add=True)),
                ('birth_date', models.DateField()),
                ('gender', models.PositiveSmallIntegerField(choices=[(1, 'male'), (2, 'female')])),
                ('is_couple', models.BooleanField()),
                ('has_children', models.BooleanField()),
                ('occupation_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'offline'), (2, 'remote'), (3, 'student'), (4, 'unemployed')], null=True)),
                ('drinking_level', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'no'), (2, 'occasionally'), (3, 'weekends'), (4, 'always')], null=True)),
                ('smoking_level', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'no'), (2, 'outside'), (3, 'balcony'), (4, 'everywhere')], null=True)),
                ('smokes_iqos', models.BooleanField(default=False)),
                ('smokes_vape', models.BooleanField(default=False)),
                ('smokes_tobacco', models.BooleanField(default=False)),
                ('smokes_cigs', models.BooleanField(default=False)),
                ('neighbourliness_level', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'low'), (2, 'moderate'), (3, 'high')], null=True)),
                ('guests_level', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'no'), (2, 'rarely'), (3, 'often')], null=True)),
                ('parties_level', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'no'), (2, 'rarely'), (3, 'often')], null=True)),
                ('bedtime_level', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'early'), (2, 'midnight'), (3, 'late'), (4, 'no')], null=True)),
                ('neatness_level', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'low'), (2, 'moderate'), (3, 'high')], null=True)),
                ('has_cats', models.BooleanField(default=False)),
                ('has_dogs', models.BooleanField(default=False)),
                ('has_reptiles', models.BooleanField(default=False)),
                ('has_birds', models.BooleanField(default=False)),
                ('bio', models.CharField(blank=True, max_length=1024, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfileNeighborPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_age_accepted', models.PositiveSmallIntegerField(default=16)),
                ('max_age_accepted', models.PositiveSmallIntegerField(default=130)),
                ('gender_accepted', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'male'), (2, 'female')], null=True)),
                ('is_couple_accepted', models.BooleanField(blank=True, null=True)),
                ('are_children_accepted', models.BooleanField(blank=True, null=True)),
                ('occupations_accepted', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(1, 'offline'), (2, 'remote'), (3, 'student'), (4, 'unemployed')]), blank=True, null=True, size=None)),
                ('drinking_levels_accepted', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(1, 'no'), (2, 'occasionally'), (3, 'weekends'), (4, 'always')]), blank=True, null=True, size=None)),
                ('max_smoking_level_accepted', models.PositiveSmallIntegerField(choices=[(1, 'no'), (2, 'outside'), (3, 'balcony'), (4, 'everywhere')], default=4)),
                ('are_nonsmokers_accepted', models.BooleanField(default=True)),
                ('neighbourliness_level_accepted', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'low'), (2, 'moderate'), (3, 'high')], null=True)),
                ('max_guests_level_accepted', models.PositiveSmallIntegerField(choices=[(1, 'no'), (2, 'rarely'), (3, 'often')], default=3)),
                ('max_parties_level_accepted', models.PositiveSmallIntegerField(choices=[(1, 'no'), (2, 'rarely'), (3, 'often')], default=3, null=True)),
                ('bedtime_levels_accepted', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(1, 'early'), (2, 'midnight'), (3, 'late'), (4, 'no')]), blank=True, null=True, size=None)),
                ('neatness_level_accepted', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'low'), (2, 'moderate'), (3, 'high')], null=True)),
                ('are_cats_accepted', models.BooleanField(default=True)),
                ('are_dogs_accepted', models.BooleanField(default=True)),
                ('are_reptiles_accepted', models.BooleanField(default=True)),
                ('are_birds_accepted', models.BooleanField(default=True)),
                ('are_other_animals_accepted', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfilePreferredLocations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfileRentPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_budget', models.PositiveIntegerField()),
                ('max_budget', models.PositiveIntegerField()),
                ('min_rent_duration_level', models.PositiveSmallIntegerField(choices=[(1, '<3m'), (2, '3m'), (3, '6m'), (4, 'y'), (5, '>y')], default=1)),
                ('max_rent_duration_level', models.PositiveSmallIntegerField(choices=[(1, '<3m'), (2, '3m'), (3, '6m'), (4, 'y'), (5, '>y')], default=5)),
                ('room_sharing_level', models.PositiveSmallIntegerField(choices=[(1, 'no'), (2, 'yes'), (3, 'only')], default=2)),
            ],
        ),
        migrations.AddConstraint(
            model_name='interesttag',
            constraint=models.CheckConstraint(check=models.Q(('name__regex', '^[а-яА-ЯёЁіІїЇєЄґҐ`\\-\\s]{2,32}$')), name='profile-about-interest-tag-name-constraint', violation_error_message='Interest tag name must be only Cyrillic chars, hyphens and spaces, 2-32 chars'),
        ),
        migrations.AddConstraint(
            model_name='otheranimaltag',
            constraint=models.CheckConstraint(check=models.Q(('name__regex', '^[а-яА-ЯёЁіІїЇєЄґҐ`\\-]{2,32}$')), name='profile-about-other-animal-tag-name-constraint', violation_error_message='Other animal tag name must be only Cyrillic chars and hyphens, 2-32 chars'),
        ),
        migrations.AddField(
            model_name='taggedinterestitem',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='shallwe_profile.interesttag'),
        ),
        migrations.AddField(
            model_name='taggedotheranimalitem',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='shallwe_profile.otheranimaltag'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userprofileabout',
            name='interests_tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='shallwe_profile.TaggedInterestItem', to='shallwe_profile.InterestTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='userprofileabout',
            name='other_animals_tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='shallwe_profile.TaggedOtherAnimalItem', to='shallwe_profile.OtherAnimalTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='userprofileabout',
            name='user_profile',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='about', to='shallwe_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='taggedotheranimalitem',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shallwe_profile.userprofileabout'),
        ),
        migrations.AddField(
            model_name='taggedinterestitem',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shallwe_profile.userprofileabout'),
        ),
        migrations.AddField(
            model_name='userprofileneighborpreferences',
            name='user_profile',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='neighbor_preferences', to='shallwe_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='userprofilepreferredlocations',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shallwe_locations.location'),
        ),
        migrations.AddField(
            model_name='userprofilerentpreferences',
            name='locations',
            field=models.ManyToManyField(related_name='preferred_in', through='shallwe_profile.UserProfilePreferredLocations', to='shallwe_locations.location'),
        ),
        migrations.AddField(
            model_name='userprofilerentpreferences',
            name='user_profile',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rent_preferences', to='shallwe_profile.userprofile'),
        ),
        migrations.AddField(
            model_name='userprofilepreferredlocations',
            name='related_preferences',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shallwe_profile.userprofilerentpreferences'),
        ),
        migrations.AddConstraint(
            model_name='userprofile',
            constraint=models.CheckConstraint(check=models.Q(('name__regex', '^[а-яА-ЯёЁіІїЇєЄґҐ`]{2,16}$')), name='user-profile-name-constraints', violation_error_message='Name should be: Cyrillic characters only, no spaces, 2-16 characters'),
        ),
        migrations.AddConstraint(
            model_name='userprofileabout',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('smoking_level__gt', 1), models.Q(('smokes_iqos', True), ('smokes_vape', True), ('smokes_tobacco', True), ('smokes_cigs', True), _connector='OR')), models.Q(models.Q(('smoking_level__gt', 1), _negated=True), ('smokes_iqos', False), ('smokes_vape', False), ('smokes_tobacco', False), ('smokes_cigs', False)), _connector='OR'), name='profile-about-smoking-constraints', violation_error_message='Either smoking_level null or =1 and smoking types are all False, or smoking_level >1 and at least one of smoking types is True'),
        ),
        migrations.AddConstraint(
            model_name='userprofileneighborpreferences',
            constraint=models.CheckConstraint(check=models.Q(('max_age_accepted__lte', 130), ('min_age_accepted__gte', 16)), name='min_age_accepted-between-16-and-130'),
        ),
        migrations.AddConstraint(
            model_name='userprofileneighborpreferences',
            constraint=models.CheckConstraint(check=models.Q(('max_age_accepted__lte', 130), ('min_age_accepted__gte', 16)), name='max_age_accepted-between-16-and-130'),
        ),
        migrations.AddConstraint(
            model_name='userprofileneighborpreferences',
            constraint=models.CheckConstraint(check=models.Q(('min_age_accepted__lte', models.F('max_age_accepted'))), name='min_age_accepted-lte-max_age_accepted'),
        ),
        migrations.AddConstraint(
            model_name='userprofileneighborpreferences',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('max_smoking_level_accepted', 1), _negated=True), ('are_nonsmokers_accepted', True), _connector='OR'), name='neighbor-prefs-nonsmokers-accepted-if-no-smoking', violation_error_message='If maximum smoking level accepted is "No Smoking" (1), nonsmokers must be accepted'),
        ),
        migrations.AddConstraint(
            model_name='userprofilerentpreferences',
            constraint=models.CheckConstraint(check=models.Q(('min_budget__lte', models.F('max_budget'))), name='rent-prefs-min_budget-lte-max_budget', violation_error_message='min_budget should be less than or equal to max_budget.'),
        ),
        migrations.AddConstraint(
            model_name='userprofilerentpreferences',
            constraint=models.CheckConstraint(check=models.Q(('min_budget__gte', 0), ('min_budget__lte', 99999)), name='rent-prefs-min_budget-range', violation_error_message='min_budget should be within the range [0, 99999].'),
        ),
        migrations.AddConstraint(
            model_name='userprofilerentpreferences',
            constraint=models.CheckConstraint(check=models.Q(('max_budget__gte', 0), ('max_budget__lte', 99999)), name='rent-prefs-max_budget-range', violation_error_message='max_budget should be within the range [0, 99999].'),
        ),
        migrations.AlterUniqueTogether(
            name='userprofilepreferredlocations',
            unique_together={('related_preferences', 'location')},
        ),
    ]
