"""
The script generates or updates a Python module (`envconstants.py`) containing
static assignments of all `SHALLWE_*` configuration values from our Pydantic
EnvSettings model. This allows us to import them directly (e.g. via
`from .envconstants import *`) in the Django `settings.py` for both runtime
and IDE autocompletion without manual duplication.

Usage:
    # From envconfig dir, run:
    python3 parse_to_constants.py [path]

    # This will create or overwrite `envconstants.py` in the same directory if no path
    # or at the given path, with contents like:
    #     # AUTO‑GENERATED by parse_to_constants.py — do not edit by hand
    #     SHALLWE_BACKEND_SECRET_KEY = "actual_value"
    #     SHALLWE_BACKEND_DB_NAME  = "actual_value"
    #     ...

    # Then in your Django settings:
    from .envconstants import *
    SECRET_KEY = SHALLWE_BACKEND_SECRET_KEY
    # ...

Options:
    path    Optional path to write the constants module (default: same dir as this script)
"""
import os
from envconfig import env_settings


def parse_to_constants(path: str = None):
    """
    Generate or update `envconstants.py` at the given path (or alongside this file
    if path is None), containing literal assignments of all SHALLWE_* constants.
    """
    cfg = env_settings()
    here = os.path.dirname(__file__)
    target = path or os.path.join(here, "envconstants.py")

    header = [
        "# AUTO‑GENERATED by parse_to_constants.py — do not edit by hand and DO NOT COMMIT",
        "# Generated from Pydantic EnvSettings model",
    ]
    body = []
    for name, value in cfg.model_dump().items():
        if name.startswith("SHALLWE_"):
            body.append(f"{name} = {value!r}")

    content = "\n".join(header + [""] + body) + "\n"

    # Only rewrite if changed
    if os.path.exists(target):
        with open(target, "r") as f:
            if f.read() == content:
                print(f"{target} is already up to date.")
                return

    with open(target, "w") as f:
        f.write(content)
    print(f"Wrote {target} ({len(body)} constants)")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description="Generate or update envconstants.py from Pydantic EnvSettings model"
    )
    parser.add_argument(
        "path",
        nargs="?",
        default=None,
        help="Output path for envconstants.py (default: same dir as script)",
    )
    args = parser.parse_args()
    parse_to_constants(path=args.path)
